services:

#  # NGINX for Load Balancing
#  nginx-lb:
#    image: nginx:latest
#    ports:
#      - "8080:8080"
#    volumes:
#      - ./nginx.conf:/etc/nginx/nginx.conf
#    container_name: nginx-lb
#    depends_on:
#      api-gateway1:
#        condition: service_healthy
#      api-gateway2:
#        condition: service_healthy
#      api-gateway3:
#        condition: service_healthy
#    networks:
#      - microservices-net

  # K6 Load
  k6:
    image: grafana/k6:latest
    volumes:
      - ./k6-test:/scripts
    container_name: grafana-k6
    depends_on:
      auth-service:
        condition: service_healthy
    networks:
      - microservices-net
    entrypoint: [ "k6", "run", "/scripts/auth-load-test.js" ]

  # Config Server
  config-server:
    build:
      context: ./config-server
      dockerfile: Dockerfile
    ports:
      - "8888:8888"
    container_name: config-server
    networks:
      - microservices-net
    healthcheck:
      test: [ "CMD", "wget", "--spider", "-q", "http://config-server:8888/actuator/health" ]
      interval: 10s
      timeout: 5s
      retries: 3

  # Eureka Server
  eureka-server:
    build:
      context: ./eureka-server
      dockerfile: Dockerfile
    ports:
      - "8761:8761"
    container_name: eureka-server
    depends_on:
      config-server:
        condition: service_healthy
    networks:
      - microservices-net
    healthcheck:
      test: [ "CMD", "wget", "--spider", "-q", "http://eureka-server:8761/actuator/health" ]
      interval: 10s
      timeout: 5s
      retries: 3

  # API Gateway 1
  api-gateway:
    build:
      context: ./api-gateway
      dockerfile: Dockerfile
    ports:
      - "8080:8080"
    container_name: api-gateway
    environment:
      - EUREKA_CLIENT_SERVICEURL_DEFAULTZONE=http://eureka-server:8761/eureka/
    depends_on:
      eureka-server:
        condition: service_healthy
    networks:
      - microservices-net
    healthcheck:
      test: [ "CMD", "wget", "--spider", "-q", "http://api-gateway:8080/actuator/health" ]
      interval: 10s
      timeout: 5s
      retries: 3

#  # API Gateway 2
#  api-gateway2:
#    build:
#      context: ./api-gateway
#      dockerfile: Dockerfile
#    ports:
#      - "8089:8080"
#    container_name: api-gateway2
#    environment:
#      - EUREKA_CLIENT_SERVICEURL_DEFAULTZONE=http://eureka-server:8761/eureka/
#    depends_on:
#      eureka-server:
#        condition: service_healthy
#    networks:
#      - microservices-net
#    healthcheck:
#      test: [ "CMD", "wget", "--spider", "-q", "http://api-gateway2:8080/actuator/health" ]
#      interval: 10s
#      timeout: 5s
#      retries: 3
#
#  # API Gateway 3
#  api-gateway3:
#    build:
#      context: ./api-gateway
#      dockerfile: Dockerfile
#    ports:
#      - "8090:8080"
#    container_name: api-gateway3
#    environment:
#      - EUREKA_CLIENT_SERVICEURL_DEFAULTZONE=http://eureka-server:8761/eureka/
#    depends_on:
#      eureka-server:
#        condition: service_healthy
#    networks:
#      - microservices-net
#    healthcheck:
#      test: [ "CMD", "wget", "--spider", "-q", "http://api-gateway3:8080/actuator/health" ]
#      interval: 10s
#      timeout: 5s
#      retries: 3

  # RabbitMQ Service
  rabbitmq:
    image: rabbitmq:management
    container_name: rabbitmq
    ports:
      - "5672:5672"
      - "15672:15672"
    environment:
      RABBITMQ_DEFAULT_USER: admin
      RABBITMQ_DEFAULT_PASS: admin_pass
    networks:
      - microservices-net
    healthcheck:
      test: [ "CMD-SHELL", "rabbitmqctl status" ]
      interval: 10s
      timeout: 5s
      retries: 3

  # Keycloak
  keycloak:
    image: quay.io/keycloak/keycloak:26.1.4
    container_name: keycloak
    command: start-dev
    ports:
      - "8180:8080"
    environment:
      - KEYCLOAK_ADMIN=admin
      - KEYCLOAK_ADMIN_PASSWORD=keycloak_pass
      - KC_HEALTH_ENABLED=true
    volumes:
      - keycloak_data:/opt/keycloak/data
    networks:
      - microservices-net
    healthcheck:
      test: ["CMD-SHELL", "exec 3<>/dev/tcp/127.0.0.1/9000;echo -e 'GET /health/ready HTTP/1.1\r\nhost: http://localhost\r\nConnection: close\r\n\r\n' >&3;if [ $? -eq 0 ]; then echo 'Healthcheck Successful';exit 0;else echo 'Healthcheck Failed';exit 1;fi;"]
      interval: 10s
      timeout: 5s
      retries: 3

  # Authentication Service
  auth-service:
    build:
      context: ./auth-service
      dockerfile: Dockerfile
    ports:
      - "8087:8087"
    container_name: auth-service
    environment:
      - EUREKA_CLIENT_SERVICEURL_DEFAULTZONE=http://eureka-server:8761/eureka/
    depends_on:
      eureka-server:
        condition: service_healthy
      keycloak:
        condition: service_healthy
      user-service:
        condition: service_healthy
    networks:
      - microservices-net
    healthcheck:
      test: [ "CMD", "wget", "--spider", "-q", "http://auth-service:8087/actuator/health" ]
      interval: 10s
      timeout: 5s
      retries: 3

  # PostgreSQL for User Service
  user-postgres:
    image: postgres:17.4
    container_name: user-postgres
    environment:
      POSTGRES_DB: users_db
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres_pass
    ports:
      - "5432:5432"
    networks:
      - microservices-net
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U postgres" ]
      interval: 10s
      timeout: 5s
      retries: 3

  # User Service
  user-service:
    build:
      context: ./user-service
      dockerfile: Dockerfile
    ports:
      - "8081:8081"
    container_name: user-service
    environment:
      - EUREKA_CLIENT_SERVICEURL_DEFAULTZONE=http://eureka-server:8761/eureka/
      - SPRING_DATASOURCE_URL=jdbc:postgresql://user-postgres:5432/users_db
      - SPRING_DATASOURCE_USERNAME=postgres
      - SPRING_DATASOURCE_PASSWORD=postgres_pass
    depends_on:
      eureka-server:
        condition: service_healthy
      user-postgres:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    networks:
      - microservices-net
    healthcheck:
      test: [ "CMD", "wget", "--spider", "-q", "http://user-service:8081/actuator/health" ]
      interval: 10s
      timeout: 5s
      retries: 3

  # PostgreSQL for Catalog Service
  catalog-postgres:
    image: postgres:17.4
    container_name: catalog-postgres
    environment:
      POSTGRES_DB: catalog_db
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres_pass
    ports:
      - "5433:5432"
    networks:
      - microservices-net
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U postgres" ]
      interval: 10s
      timeout: 5s
      retries: 3

  # Catalog Service
  catalog-service:
    build:
      context: ./catalog-service
      dockerfile: Dockerfile
    ports:
      - "8082:8082"
    container_name: catalog-service
    environment:
      - EUREKA_CLIENT_SERVICEURL_DEFAULTZONE=http://eureka-server:8761/eureka/
      - SPRING_DATASOURCE_URL=jdbc:postgresql://catalog-postgres:5432/catalog_db
      - SPRING_DATASOURCE_USERNAME=postgres
      - SPRING_DATASOURCE_PASSWORD=postgres_pass
    depends_on:
      eureka-server:
        condition: service_healthy
      catalog-postgres:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    networks:
      - microservices-net
    healthcheck:
      test: [ "CMD", "wget", "--spider", "-q", "http://catalog-service:8082/actuator/health" ]
      interval: 10s
      timeout: 5s
      retries: 3

  # PostgreSQL for Delivery Service
  delivery-postgres:
    image: postgres:17.4
    container_name: delivery-postgres
    environment:
      POSTGRES_DB: delivery_db
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres_pass
    ports:
      - "5437:5432"
    networks:
      - microservices-net
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U postgres" ]
      interval: 10s
      timeout: 5s
      retries: 3

  # Delivery Service
  delivery-service:
    build:
      context: ./delivery-service
      dockerfile: Dockerfile
    ports:
      - "8086:8086"
    container_name: delivery-service
    environment:
      - EUREKA_CLIENT_SERVICEURL_DEFAULTZONE=http://eureka-server:8761/eureka/
      - SPRING_DATASOURCE_URL=jdbc:postgresql://delivery-postgres:5432/delivery_db
      - SPRING_DATASOURCE_USERNAME=postgres
      - SPRING_DATASOURCE_PASSWORD=postgres_pass
    depends_on:
      eureka-server:
        condition: service_healthy
      delivery-postgres:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    networks:
      - microservices-net
    healthcheck:
      test: [ "CMD", "wget", "--spider", "-q", "http://delivery-service:8086/actuator/health" ]
      interval: 10s
      timeout: 5s
      retries: 3

  # PostgreSQL for Inventory Service
  inventory-postgres:
    image: postgres:17.4
    container_name: inventory-postgres
    environment:
      POSTGRES_DB: inventory_db
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres_pass
    ports:
      - "5436:5432"
    networks:
      - microservices-net
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U postgres" ]
      interval: 10s
      timeout: 5s
      retries: 3

  # Inventory Service
  inventory-service:
    build:
      context: ./inventory-service
      dockerfile: Dockerfile
    ports:
      - "8085:8085"
    container_name: inventory-service
    environment:
      - EUREKA_CLIENT_SERVICEURL_DEFAULTZONE=http://eureka-server:8761/eureka/
      - SPRING_DATASOURCE_URL=jdbc:postgresql://inventory-postgres:5432/inventory_db
      - SPRING_DATASOURCE_USERNAME=postgres
      - SPRING_DATASOURCE_PASSWORD=postgres_pass
    depends_on:
      eureka-server:
        condition: service_healthy
      inventory-postgres:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
      catalog-service:
        condition: service_healthy
    networks:
      - microservices-net
    healthcheck:
      test: [ "CMD", "wget", "--spider", "-q", "http://inventory-service:8085/actuator/health" ]
      interval: 10s
      timeout: 5s
      retries: 3

  # PostgreSQL for Order Service
  order-postgres:
    image: postgres:17.4
    container_name: order-postgres
    environment:
      POSTGRES_DB: order_db
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres_pass
    ports:
      - "5434:5432"
    networks:
      - microservices-net
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U postgres" ]
      interval: 10s
      timeout: 5s
      retries: 3

  # Order Service
  order-service:
    build:
      context: ./order-service
      dockerfile: Dockerfile
    ports:
      - "8083:8083"
    container_name: order-service
    environment:
      - EUREKA_CLIENT_SERVICEURL_DEFAULTZONE=http://eureka-server:8761/eureka/
      - SPRING_DATASOURCE_URL=jdbc:postgresql://order-postgres:5432/order_db
      - SPRING_DATASOURCE_USERNAME=postgres
      - SPRING_DATASOURCE_PASSWORD=postgres_pass
    depends_on:
      eureka-server:
        condition: service_healthy
      order-postgres:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    networks:
      - microservices-net
    healthcheck:
      test: [ "CMD", "wget", "--spider", "-q", "http://order-service:8083/actuator/health" ]
      interval: 10s
      timeout: 5s
      retries: 3

networks:
  microservices-net:
    driver: bridge

volumes:
  keycloak_data: